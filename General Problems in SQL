
ID	NAME 	REGION	MARKS	  DOB	    VACCINE	  GENDER
-----------------------------------------------------
101	ABCD	EAST	  750	  1994-04-29	  TRUE	  MALE
202	PQRS	WEST	  450  	1995-02-20	  FALSE	  FEMALE
303	XYZ	  WEST	  600	    1997-04-25	  TRUE	 FEMALE
404	LMNO	NORTH	   485	  1996-02-10	  TRUE	  MALE
505	ZZZ	  SOUTH	  700	    2002-01-23	  FALSE	    MALE
399	DEF	  SOUTH	  120  	  2001-12-30	  FALSE	    FEMALE
268	GHGH	EAST	  658	  2000-12-10	    TRUE	    MALE
999	KLM	  NORTH	  850	    1997-01-25	  FALSE	    MALE


1)	WRITE A QUERY TO FETCH ALL THE RECORDS FROM THE TABLE
SELECT * FROM STUDENT ;

2)	WRITE THE QUERY TO FETCH ONLY NAME, DOB, MARKS FROM THE TABLE
SELECT NAME , DOB , MARKS FROM STUDENT ;

3)	WRITE A QUERY TO FIND THE NAME OF STUDENT WITH HIGHEST MARKS.
SELECT NAME FROM STUDENT WHERE MARKS = (SELECT MAX(MARKS) FROM STUDENT);

WITH CTE AS (SELECT MAX(MARKS) FROM STUDENT)
SELECT NAME FROM STUDENT WHERE MARKS = (SELECT * FROM CTE) ;

4)	WRITE A QUERY TO FETCH DATA IN DESCRESING ORDER OF MARKS
SELECT * FROM STUDENT ORDER BY MARKS DESC ;

5)	WRITE A QUERY TO FETCH TOP 5 RECORDS WITH HIGHETS MARKS
SELECT * FROM STUDENT ORDER BY MARKS DESC LIMIT 5 ;

6)	WRITE A QUERY TO FETCH THE TOP 5 RECORDS WITH LOWEST MARKS
SELECT * FROM STUDENT ORDER BY MARKS ASC LIMIT 5 ;

7)	WRITE QUERY TO FETCH DATA IN DECREASING ORDER OF MARKS, IF MARKS ARE SAME THEN ORDER THEM BY INCREASING ORDER OF NAME.
SELECT * FROM STUDENT ORDER BY MARKS DESC NAME ASC ;

8)	WRITE A QUERY TO FIND THE AVERAGE MARKS AND SUM OF MARKS OF ALL THE CANDIDATES.
SELECT SUM(MARKS) AS TOTAL_MARKS , AVG(MARKS) AS AVERAGE_MARKS 
FROM  STUDENT ;

9)	FIND THE COUNT OF DISTINCT REGIONS IN THE TABLE
SELECT COUNT(DISTINCT(REGION)) FROM STUDENT ;

10)	FIND THE AVEARGE MARKS FOR CANDIDATES FROM EAST REGION.
SELECT AVG(MARKS) FROM STUDENT WHERE REGION = ‘EAST’ ;

11)	FIND THE CANDIDATES WHO HAVE SCORED MORE MARKS THAN AVERAGE
SELECT * FROM STUDENT WHERE MARKS > (SELECT AVG(MARKS) FROM STUDENT);

12)	FIND THE COUNT OF CANDIDATES WHO HAVE SCORED MORE MARKS THAN 300 AND LESS MARKS THAN 450
SELECT COUNT(*) FROM STUDENT WHERE MARKS > 300 AND MARKS < 450 ;

13)	ORDER THE ROWS IN SUCH WAY THAT AGED CANDIDATE WILL BE ON TOP
SELECT * FROM STUDENT ORDER BY AGE DESC ;

14)	WRITE A QUERY TO FETCH RECORDS WHREE NAME STARTS WITH VOWEL

SELECT * FROM STUDENT WHERE NAME LIKE ‘A%’ OR NAME LIKE ‘E%’ OR
NAME LIKE ‘I%’ OR NAME LIKE ‘O%’ OR NAME LIKE ‘U%’ ;

/* or */

select * from students where name regexp '[aeiou].*'
UNION ALL
SELECT * FROM STUDENT WHERE NAME REGEXP ‘[AEIOU].*’ ;

15)	WRITE A QUERY TO FIND NAMES AND MONTH OF BIRTH OF CANDIDATES.
SELECT NAME , MONTHNAME(DOB) FROM STUDENTS ;

16)	 WRITE A QUERY TO ORDER DATA BY MONTH OF BIRTHDAY OF CANDIDATES IN DESC. ORDER
SELECT * FROM STUDENT ORDER BY MONTH(DOB) DESC ;

17)	WRITE A QUERY TO FIND OUT DIFFERENCES BETWEEN MAXIMUM MARKS AND MINIMUM MARKS
SELECT (SELECT MAX(MARKS) FROM STUDENT) – (SELECT MIN(MARKS) FROM STUDENT) ;

18)	FIND THE REGION FOR WHICH DIFFERENCE BETWEEN MAXIMUM AND MINIMUM MARKS IS HIGHEST
WITH CTE_1 AS (SELECT REGION , MAX(MARKS) , MIN(MARKS) FROM STUDENT
GROUP BY 1 ),
CTE_2 AS (SELECT *, MAX(MARKS)-MIN(MARKS) AS DIFF FROM CTE_1)
SELECT REGION FROM CTE_2 ORDER BY DIFF DESC ; 


19)	ADD THE EPHITET “MR.” TO NAME WHERE NAME = ‘RAJU’ 
SELECT *,
CASE WHEN NAME = ‘RAJU’ THEN CONCAT
20)	FIND THE REGION WHERE SUM OF MARKS IS LOWEST
SELECT REGION FROM
(SELECT REGION , SUM(MARKS) FROM STUDENT GROUP BY 1 ORDER BY 2 DESC
LIMIT 1);

21)	WRITE A QUERY TO FETCH RECORDS WHERE NAME DO NOT START WITH VOWEL ASSUMING FIRST LETTER OF NAME IS CAPITAL.
SELECT * FROM STUDENT WHERE NAME NOT LIKE ‘A%’ AND 
NAME NOT LIKE ‘E%’ AND NAME NOT LIKE ‘I%’ AND NAME NOT LIKE ‘O%’ AND 
NAME NOT LIKE ‘U%’ ; 

SELECT * FROM STUDENT WHERE NAME NOT REGEXP ‘[AEIOU].*’ ;

22)	FIND THE REGION WHICH HAS MAXIMUM NUMBER OF CANDIDATES
SELECT REGION FROM (
SELECT REGION , COUNT(*) FROM STUDENT GROUP BY 1 ORDER BY 2 DESC LIMIT 1) ;

23)	FIND THE REGION OF CANDIDATE WHO HAS SCORED HIGHEST SCORE / MARKS

SELECT REGION FROM STUDENT WHERE MARKS = (SELECT MAX(MARKS) FROM 
STUDENT);

24)	FIND THE NUMBER OF CANDIDATES WHO ARE BORN IN THE YEAR 1994.
SELECT COUNT(*) FROM STUDENT WHERE YEAR(DOB) = ‘1994’ ;

25)	FIND THE NUMBER OF CANDIDATES WHO ARE BORN IN THE MONTH OF DECEMBER
SELECT COUNT(*) FROM STUDENT WHERE MONTHNAME(DOB) = ‘Dec’ ;

SELECT COUNT(*) FROM STUDENT WHERE MONTH(DOB) = 12 ;

26)	FIND THE CANDIDATES WHO ARE BORN IN THE SAME MONTH
SELECT * FROM STUDENT WHERE MONTH(DOB) IN  (
SELECT  MONTH(DOB), COUNT(*)  FROM STUDENT GROUP BY 1 HAVING COUNT(*) > 1)
;

27)	PRINT NEW COLUMN AVEARGE MARKS, INFRONT OF TABLE
SELECT *, AVG(MARKS)  OVER() AS AVERAGE_MARKS FROM STUDENT  ;

28)	PRINT THE MARKS OF NEXT CANDIDATE IN NEW COLUMN
SELECT *, LEAD(MARKS) OVER(OREDR BY NAME ASC) AS NEXT_CANDIDATE_MARKS
FROM STUDENT ; 


29)	FIND THE NAME OF CANDIDATE WHO HAS SECURED 3RD HIGHEST MARKS FROM EAST REGION
SELECT NAME FROM STUDENT WHERE REGION = ‘EAST’ OREDR BY MARKS DESC LIMIT 1 OFFSET 2 ;   /* we want 1 row but first 2 rows should be ignored */

30)	FIND THE NAME OF CANDIDATE WHO HAS SECURED 2ND HIGHEST MARKS IN ENTIRE DATABASE. USE CTE HERE.
WITH CTE AS (SELECT * FROM STUDENT ORDER BY MARKS DESC LIMIT 2 OFFSET 1)
SELECT NAME FROM CTE ;

31)	WRITE A QUERY TO FIND THE AGE IN YEARS OF ALL CANDIDATES IN TABLE.
WITH CTE AS (SELECT *, DATEDIFF(‘YEAR’, DOB, CURRENT_DATE()) AS AGE FROM STUDENT)
SELECT NAME , AGE FROM CTE ;

32)	CREATE EXTRA COLUMN OF MINIMUM MARKS AND MAXIMUM MARKS FOR EACH REGION 
SELECT *, MAX(AGE) OVER(PARTITION BY REGION) AS MAXIMUM_AGE , MIN(AGE) 
OVER(PARTTITON BY REGION) AS MINUMUM_AGE FROM STUDENT ;


33)	CREATE EXTRA COLUMN FOR STATUS “above average” and “below avg” THOSE STUDENTS WHO HAVE MORE THAN AVERAGE MARKS ARE “ABOVE AVERAGE”
WITH CTE AS (SELECT *, AVG(MARKS) OVER() AS AVG_ MARKS FROM STUDENT)
SELECT * ,
CASE WHEN MARKS > AVG_MARKS THEN ‘ABOVE AVERAGE’
ELSE ‘BELOW AVERAGE’
END AS ‘STATUS_OF_CANDIDATE’ ;

34)	 WRITE A QUERY TO FIND MOST COMMON NAME FROM THE DATABASE
SELECT MODE(NAME) FROM STUDENT ;

WITH CTE AS
(SELECT NAME , COUNT(*) FROM STUDENT GROUP BY 1 ORDER BY 2 DESC
LIMIT 1)
SELECT NAME FROM CTE ;


35)	WRITE A QUERY TO FIND THE MEDIAN AGE FROM TABLE / DATA
WITH CTE AS 
(SELECT *, DATEDIFF(‘YEAR’ , DOB, current_date()) AS AGE FROM STUDENT)
SELECT MEDIAN(AGE) FROM CTE ;



36)	WRITE A QUERY TO FIND THE MEDIAN MARKS FROM TABLE, USING WINDOW FUNCTION
WITH CTE AS 
(SELECT *, DATEDIFF(‘YEAR’ , DOB, CURRENT_DATE()) AS AGE FROM STUDENT)
SELECT PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY AGE DESC) AS MEDIAN_AGE
FROM CTE ;

37)	WRITE A QUERY TO FIND THE DIFFERENCE BETWEEN MEDIAN AGE AND AVG. AGE
WITH CTE AS 
(SELECT *, DATEDIFF(‘YEAR’ , DOB, CURRENT_DATE()) AS AGE FROM STUDENT)
SELECT MEDIAN(AGE) – AVG(AGE) AS DIFFERENCE FROM CTE ;

38)	WRITE A QUERY TO FIND OUT TOTAL PERCENTAGE OF MALE CANDIDATES IN TOTAL DATABASE
WITH CTE_1 AS (SELECT GENDER , COUNT(*) FROM STUDENT GROUP BY 1)
, CTE_2 AS (SELECT * FROM CTE WHERE GENDER = ‘MALE’)
, CTE_3 AS (SELECT * FROM CTE WHERE GENDER <> ‘MALE’)
SELECT ‘MALE’,
((SELECT * FROM CTE_2) / (SELECT * FROM CTE_3))*100 AS PERCNT ;


39)	FIND OUT THE REGION WISE NUMBER OF CANDIDATES WHO HAVE TAKEN VACCINES
SELECT REGION , COUNT(*) FROM STUDENT WHERE VAC_STATUS = TRUE 
GROUP BY 1 OREDR 2 DESC ;

40)	FIND OUT REGION WISE, VACCINATION NUMBERS WHO HAVE DONE VACC AND NOT DONE VACC
WITH CTE_1 AS (SELECT REGION , COUNT(*) AS DONE FROM STUDENT WHERE VACC_STATUS = TRUE),
CTE_2 AS (SELECT REGION , COUNT(*)  AS NOT_DONE FROM STUDENT WHERE VACC_STATUS <> FALSE)
CTE_3 AS (SELECT * FROM CTE_1 INNER JOIN CTE_2 ON CTE_1.REGION = CTE_2.REGION)
SELECT * FROM CTE_3 ;


41)	WITHOUT USING CTE OR WINDOWS FUNCTION OR OFFSET, FIND OUT THE CANDIDATE WHO SCORED 3RD HIGHEST MARKS.
SELECT * FROM 
(SELECT * FROM STUDENT ORDER BY MARKS DESC)
ORDER BY MARKS ASC LIMIT 1;

42)	FIND OUT THE CANDIDATES WHO SCORE MORE MARKS THAN AVG. MARKS OF THAT PARTICULAR REGION.
WITH CTE AS (SELECT *, AVG(MARKS) OVER (PARTITION BY REGION ORDER BY MARKS DESC) AS AVG_MARKS FROM STUDENT)
SELECT * FROM CTE
WHERE MARKS > AVG_MARKS ;

43)	WRITE A QUERY TO FETCH THE CANDIDATES WHO ARE EITHER FROM EAST REGION OR HAVE LESS THAN 400 MARKS. ONLY ONE CONDITION SHOULD GET SATISFIED NOT BOTH.
SELECT * FROM STUDENT 
WHERE REGION = ‘EAST’ AND MARKS > 400 OR 
REGION <> ‘EAST’ AND MARKS < 400 ;

44)	FIND THE COUNT OF CANDIDATES WHO HAVE SECURED MARKS BETWEEN (400 AND 500)
AND (300-400) AND (500-600)
SELECT ‘300-400’ , COUNT(*) FROM STUDENT WHERE MARKS BETWEEN 300 AND 399
UNION ALL
SELECT ‘400-500’ , COUNT(*) FROM STUDENT WHERE MARKS BETWEEN 400 AND 499
UNION ALL
SELECT ‘500-600’ , COUNT(*) FROM STUDENT WHERE MARKS BETWEEN 500 AND 600 ;

